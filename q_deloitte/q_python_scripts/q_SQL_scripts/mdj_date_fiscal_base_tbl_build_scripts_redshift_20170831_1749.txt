CREATE TABLE IF NOT EXISTS mdj.number (
  number INTEGER NOT NULL
) DISTSTYLE ALL SORTKEY (number);

INSERT INTO mdj.number VALUES (1), (2), (3), (4), (5), (6), (7), (8);
INSERT INTO mdj.number SELECT number + 8 FROM mdj.number;
INSERT INTO mdj.number SELECT number + 16 FROM mdj.number;
INSERT INTO mdj.number SELECT number + 32 FROM mdj.number;
INSERT INTO mdj.number SELECT number + 64 FROM mdj.number;
INSERT INTO mdj.number SELECT number + 128 FROM mdj.number;
INSERT INTO mdj.number SELECT number + 256 FROM mdj.number;
INSERT INTO mdj.number SELECT number + 512 FROM mdj.number;

INSERT INTO mdj.number VALUES (0);

--select count(*) from mdj.number;

--Check that total and expected_total are the same:
/*
SELECT
  SUM(number::BIGINT)                                   AS total,
  (MAX(number::BIGINT) * (MAX(number::BIGINT) + 1)) / 2 AS expected_total
FROM mdj.number;
*/


CREATE TABLE mdj.date_dimension (
  batch_id             integer  default 1 NOT NULL
  date_id              INTEGER                     NOT NULL PRIMARY KEY,

  -- DATE
  calendar_date            DATE                        NOT NULL,
  au_format_date       CHAR(10)                    NOT NULL,
  us_format_date       CHAR(10)                    NOT NULL,

  -- YEAR
  year_number          SMALLINT                    NOT NULL,
  year_week_number     SMALLINT                    NOT NULL,
  year_day_number      SMALLINT                    NOT NULL,
  fiscal_year_number   SMALLINT                    NOT NULL,

  -- QUARTER
  qtr_number           SMALLINT                    NOT NULL,
  fiscal_qtr_number    SMALLINT                    NOT NULL,

  -- MONTH
  month_sequence_number   SMALLINT                    NOT NULL,
  month_name              CHAR(9)                     NOT NULL,
  month_day_number        SMALLINT                    NOT NULL,

  -- WEEK
  week_day_number       SMALLINT                    NOT NULL,

  -- DAY
  day_name              CHAR(9)                     NOT NULL,
  day_is_weekday       SMALLINT                    NOT NULL,
  day_is_last_of_month SMALLINT                    NOT NULL
) DISTSTYLE ALL SORTKEY (date_id)
;


-- truncate table mdj.date_dimension

INSERT INTO mdj.date_dimension
  SELECT
    
      1 AS batch_id
  , 999 AS dim_date_id
  , seq as day_sequence_number
  week_sequence_number_usa INTEGER DEFAULT 0 NOT NULL ENCODE none,
  week_sequence_number_eu_iso INTEGER DEFAULT 0 NOT NULL ENCODE none,
  month_sequence_number SMALLINT DEFAULT 0 NOT NULL ENCODE none,
  calendar_date DATE NOT NULL ENCODE none,
  
  
  cast(seq + 1 AS INTEGER)                                      AS date_id,
  
  -- DATE
    datum                                                         AS calendar_date,
    TO_CHAR(datum, 'DD/MM/YYYY') :: CHAR(10)                      AS au_format_date,
    TO_CHAR(datum, 'MM/DD/YYYY') :: CHAR(10)                      AS us_format_date,

    -- YEAR
    cast(extract(YEAR FROM datum) AS SMALLINT)                    AS year_number,
    cast(extract(WEEK FROM datum) AS SMALLINT)                    AS year_week_number,
    cast(extract(DOY FROM datum) AS SMALLINT)                     AS year_day_number,
    cast(to_char(datum + INTERVAL '6' MONTH, 'yyyy') AS SMALLINT) AS fiscal_year_number,

    -- QUARTER
    cast(to_char(datum, 'Q') AS SMALLINT)                         AS qtr_number,
    cast(to_char(datum + INTERVAL '6' MONTH, 'Q') AS SMALLINT)    AS fiscal_qtr_number,

    -- MONTH
    cast(extract(MONTH FROM datum) AS SMALLINT)                   AS month_sequence_number,
    to_char(datum, 'Month')                                       AS month_name,
    cast(extract(DAY FROM datum) AS SMALLINT)                     AS month_day_number,

    -- WEEK
    cast(to_char(datum, 'D') AS SMALLINT)                         AS week_day_number,

    -- DAY
    to_char(datum, 'Day')                                         AS day_name,
    CASE WHEN to_char(datum, 'D') IN ('1', '7')
      THEN 0
    ELSE 1 END                                                    AS day_is_weekday,
    CASE WHEN
      extract(DAY FROM (datum + (1 - extract(DAY FROM datum)) :: INTEGER +
                        INTERVAL '1' MONTH) :: DATE -
                       INTERVAL '1' DAY) = extract(DAY FROM datum)
      THEN 1
    ELSE 0 END                                                    AS day_is_last_of_month
  FROM
    -- Generate days for the next ~20 years starting from 2011.
    (
      SELECT
        '2017-01-01' :: DATE + number AS datum,
        number                        AS seq
      FROM mdj.number
      WHERE number < 20 * 365
    ) DQ
  ORDER BY 1;


-- Check dates generated

select * from mdj.date_dimension
order by date_id

