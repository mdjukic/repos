
- the line, will allow us to track who exactly made changes to git objects:
git config --global user.name "Marko Djukic"

- need also to define a user email address:
git config --global user.email mdjukic@dsl.pipex.com

- To use a specific editor, ie. testwrangler
  the following command has to be entered on a mac:
git config --global core.editor "edit -w"

- To use vim, enter the following config line, similar to above:
git config --global core.editor "vim"

- To list config, run the command:
git config --list
- output is
(activate) @DESKTOP-H4RBSE9:/c/Users/mdjuk/repos : git config --list
core.symlinks=false
core.autocrlf=input
core.fscache=true
color.diff=auto
color.status=auto
color.branch=auto
color.interactive=true
help.format=html
diff.astextplain.textconv=astextplain
rebase.autosquash=true
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.required=true
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
http.sslbackend=openssl
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.required=true
filter.lfs.process=git-lfs filter-process
credential.helper=manager
user.email=mdjukic@dsl.pipex.com
user.name=marko djukic
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
remote.origin.url=https://github.com/mdjukic/repos.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master

- To get help, simply enter:
git help

- or if detailed help is required on say, add, enter:
git help add

- if you want to git to track changes made, to a specific directory,
go to that directory, and enter the git --init command:
cd repos
cd q_python_scripts
git init

- To track say, all java files, enter the following:
git add *.java

- To IGNORE files and directories, create a .gitignore file, and define file types
and directories to ignore
# IGNORE file types
*.log
*.log00

# IGNORE complete directories
q_docs/

- Website for gitignore file to download:
https://github.com/github/gitignore

- To find out what has been changed, run:
git diff

- To STAGE a file, we use:
git add <filename>

- Comments when committing without using -m option
On first line of opened file, enter this description, between
'---' lines:

-----------------------------------------------------------------
Client asked me to change a Comment

The client asked for the comment to be added.  I make that 
change for them.

* Client asked for comment change
* I don't see this effecting anything

Closes-Bug #129161
-----------------------------------------------------------------

- Shortcut way of skipping the staging (ie. add) is to run:
git commit -a -m "Enter description here"
This will add and commit the changes

- To remove a file, note that mdjDeleteMe.txt has been created. 
git rm -f mdjDeleteMe.txt

- To unstage a file, which has been staged:
git add mdjDeleteMe.txt  (this cmd will stage the file)
git rm --cached mdjDeleteMe.txt (this will unstage the file, but not delete it)

- rename a file, after it has been staged:
git add mdjDeleteMe.txt
git commit -m 'Initial project version'
git mv mdjDeleteMe.txt mdjDeleteMe2.txt
git status

- LOGS within Git - to show all changes within git, run:
git log
or
git log --pretty=oneline

to fomat the log in a readable format, run:
git log --pretty=format:"%h : %an : %ar : %s"











